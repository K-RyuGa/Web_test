import os
from openai import OpenAI
import re
import time

# --- 初期設定 ---
api_key = os.environ.get("OPENAI_API_KEY")
if not api_key:
    raise ValueError("環境変数 'OPENAI_API_KEY' が設定されていません。")

client = OpenAI(api_key=api_key)

# ★出力先フォルダをパーソナライズ版に新規作成
output_dir = r"C:\Users\salmi\web\evaluation_results_personalized"
os.makedirs(output_dir, exist_ok=True)

# --- AIエージェント定義 ---
def chat_with_gpt(messages):
    completion = client.chat.completions.create(model="gpt-4o", messages=messages, temperature=0.7)
    return completion.choices[0].message.content

def demo_play(messages):
    completion = client.chat.completions.create(model="gpt-4o", messages=messages, temperature=0)
    return completion.choices[0].message.content

def evaluation_with_gpt(messages):
    completion = client.chat.completions.create(model="gpt-4o", messages=messages, temperature=0)
    return completion.choices[0].message.content

# --- ★パーソナライズ機能関連の関数とプロンプト ---

summary_prompt = '''
    あなたには、私が作成する「日本語学習者支援ゲーム」のシステムの一部である、**プレイヤーの言語的課題分析機能**を担当してもらいます。
    あなたの役割は、以下の会話履歴を分析し、プレイヤーが日本語でのコミュニケーションにおいて抱えている「課題」を客観的に抽出することです。

    【重要】分析のルール
    *   プレイヤーの性格、気分、個性、意図などを**絶対に分析・記述してはいけません**。
    *   抽出する情報は、**純粋に言語的・コミュニケーション戦略的な課題**に限定してください。
    *   以下の観点に沿って、具体的な課題を簡潔な箇条書きで出力してください。

    【分析の観点】
    1.  **文法・語彙の誤り**: 助詞（は/が/を/に等）の間違い、動詞の活用ミス、不適切な単語の選択。
    2.  **敬語・丁寧語のレベル**: 場面にそぐわない丁寧すぎる、または、くだけすぎた表現。
    3.  **コミュニケーション戦略**: 質問への応答が不自然に短い/長い、話の展開が唐突、相手への配慮が欠けた直接的すぎる表現など。
    4.  **会話の流れの阻害**: 文脈を無視した発言、会話の目的から逸脱した言動など。

    以下の会話履歴を分析し、上記の観点から課題のみを箇条書きで出力してください。
'''

making_prompt_template = '''
    あなたには、私が作成する「日本語学習者支援ゲーム」のシステムの一部である、**動的プロンプト生成機能**を担当してもらいます。
    このゲームは、日本語学習中の外国人プレイヤーが、架空の日本での生活をシミュレーションしながらリアルな会話を通じて日本語力を向上させることを目的としています。
    あなたには、プレイヤーの過去の会話履歴や言語的課題リストに基づき、一人ひとりに最適化された会話シナリオ（プロンプト）を生成する役割を担っていただきます。

    以下に、ベースとなるプロンプトとプレイヤーの言語的課題リストを与えますので、これらを基に、学習効果が最大化されるような、より自然で質の高いプロンプトへと改善してください。
    ただし、元々のプロンプトに定められている具体的な行動（ミッション）を減らしてはいけません。
    出力は余計な文言を含まず、完成したプロンプトのみを出力してください。

    ベースとなるプロンプト
    「
    {base_scenario}
    」

    プレイヤーの言語的課題リスト
    「
    {player_summary}
    」

    あなたのタスクは、そのリストにある**個々の課題を克服させるのに最適な状況を、ベースとなるプロンプトのシナリオに自然に組み込む**ことです。
'''


def generate_player_summary(conversation_log):
    """会話ログからプレイヤーの言語的課題を要約する"""
    if not conversation_log.strip():
        return ""
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": summary_prompt},
            {"role": "user", "content": conversation_log}
        ],
        temperature=0.25,
    )
    return response.choices[0].message.content

def make_new_prompt(player_summary, base_scenario):
    """プレイヤーの課題要約を基に、新しいプロンプトを動的に生成する"""
    if not player_summary.strip():
        return base_scenario

    making_prompt = making_prompt_template.format(base_scenario=base_scenario, player_summary=player_summary)
    
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "system", "content": making_prompt}],
        temperature=0
    )
    return response.choices[0].message.content


# --- その他のプロンプト定義 ---
player_demo_prompt = """
あなたは日本語を学習中の外国人です。以下のルールに従って、架空の日本での生活をロールプレイしてください。

文法や単語を頻繁に間違える：助詞や動詞の活用、語順などに明確な誤りを含めてください。
語彙を制限する：難しい言葉を避け、簡単で基本的な語彙だけを使うようにしてください。
会話の意図を誤解する：相手の発言を正しく理解できず、文脈に合わない返答をしてください。
現実的な誤りを重視する：実際の初級～中級の日本語学習者がしがちなミスを意識してください。
書き言葉として表現する：会話調ではあっても、「えー」「えっと」などの口語的なつなぎ言葉は使わないでください。

今回は以下の役割を演じてください。
"""

evaluation_prompt = '''あなたは、日本語学習者の会話を分析し、添削と評価を行う、**非常に厳格で有能な**プロの日本語教師です。
あなたの仕事は、学習者の僅かな誤りや不自然な点も見逃さず、**最高水準の日本語表現**へと導くことです。

以下の【ステップ1】と【ステップ2】を順番に、極めて厳密に実行してください。

---
**【ステップ1：会話のインライン添削】**

まず、与えられた会話ログを一行ずつ、徹底的に添削します。

**[添削のルール]**
1.  会話ログ全体を、一言一句変えずに、まずそのまま出力します。
2.  学習者（「ユーザー:」で始まる行）の発言を精査し、**文法的な誤り、語彙の不適切な選択、不自然な表現、より良い言い回し**がある場合は、その行に含まれる**該当箇所をすべて**、以下の【添削フォーマット】に従って書き換えてください。
3.  **少しでも改善の余地があれば、積極的に添削を行ってください。** 完璧な発話はほとんどありません。
4.  間違いのない行、およびAI（「AI:」で始まる行）は、絶対に書き換えず、そのまま出力してください。

**[添削フォーマット]**
*   間違いや改善点は `[正しい/より良い表現][元の表現]` という形式で修正箇所を明記します。
*   修正した行の直後に、括弧（）を使って、**なぜその修正が必要なのか、文法的な観点（品詞、助詞の使い方、時制など）やニュアンスの違いから具体的に説明**してください。複数の修正をまとめて説明しても構いません。

---
**【ステップ2：総合評価】**

ステップ1で会話全体の添削が終わったら、区切り線として `---` を出力してください。
その後、あなたが行った添削内容に基づき、会話全体を以下の3つの観点から**厳格に**採点してください。

**[評価の観点]**
1.  **文法と語彙の正確さ:** 助詞、動詞の活用、単語の選択が、文脈上完全に正確か。
2.  **表現の自然さと適切さ:** TPOや相手との関係性を踏まえ、ネイティブスピーカーが使うような自然な表現か。丁寧語のレベルは適切か。
3.  **会話の論理性と流暢さ:** 話の流れがスムーズで、意図が明確に伝わっているか。

**[総合評価の出力フォーマット]**
### 1. 文法と語彙の正確さ
**スコア:** XX/100
詳細な理由と具体的な改善アドバイス

### 2. 表現の自然さと適切さ
**スコア:** XX/100
詳細な理由と具体的な改善アドバイス

### 3. 会話の論理性と流暢さ
**スコア:** XX/100
詳細な理由と具体的な改善アドバイス

【採点基準】
*   90～100点（ほぼ完璧）: ネイティブスピーカーと遜色ないレベル。
*   70～89点（良い）: 細かい癖や不自然さはあるが、コミュニケーションは円滑。
*   40～69点（要改善）: 明確な誤りが散見され、意味の推測が必要な場面がある。
*   0～39点（大きな課題あり）: コミュニケーションに支障をきたすレベルの誤りが多数ある。
**採点は非常に厳しく行ってください。安易に高得点を与えないでください。**
'''

base_prompt_prefix = '''
    あなたには、私が作成する「日本語学習者支援ゲーム」の登場人物を演じてもらいます。
    このゲームは、日本語学習中の外国人プレイヤーが、架空の日本での生活をシミュレーションしながらリアルな会話を通じて日本語力を向上させることを目的としています。
    プレイヤーは、さまざまなシチュエーションで登場するキャラクターと会話を重ね、日本での生活を疑似体験しながら、語彙や文法、そして自然な表現を学んでいきます。

    【重要】会話の原則
    あなたの最も重要な役割は、単に親切な案内役になることではなく、リアルな日本の会話をシミュレートすることです。
    あなたは、プレイヤーがミッションを達成できるように、会話を積極的に誘導してください。
    もしプレイヤーの言葉遣いがTPO（時・場所・場面）に合っていなかったり、不自然だったり、無礼だったりした場合、あるいは、会話の自然なステップ（例えば、自己紹介や世間話など）を飛ばして、いきなり最終目的（例：「次に会う約束」）を達成しようとした場合、あなたは安易に「ミッション達成」を許可してはいけません。

    その際は、あなたのキャラクターとして最も自然な反応を返してください。例えば、以下のような対応です。
    ・相手の意図が分からず、困惑する。
    ・丁寧だが、はっきりと要求を断る。（例：「申し訳ありませんが、まだお互いのことをよく知らないので…」）
    ・「どういうことですか？」と、相手の真意を確かめる質問をする。

    【「ミッション失敗」の条件】
    以下の状況では、会話を打ち切り「ミッション失敗」と出力してください。
    *   プレイヤーがキャラクターの指示に全く従わない場合。（例：パスポートの提示を求めているのに、3回連続で無関係な話をする）
    *   会話の文脈と全く関係のない発言を繰り返す場合。
    *   著しく無礼な態度を取り、キャラクターが会話の継続を困難だと感じた場合。

    プレイヤーが適切なコミュニケーションを段階的に取って初めて、ミッションが達成されるように会話を導いてください。

    テンポの良い、短めのフレーズで会話を進め、自然な流れを意識してください。プレイヤーが質問しやすいように工夫しながら、リアクションを交え、実際の生活のような自然な会話をしてください。
    何を言われても、与えられた役を演じ続けてください。

    今回は、以下の役を演じてください。
'''

end_prompt = '''
    「ミッション達成」はゲームクリアの合言葉です。プレイヤーがミッションを達成した場合、**必ず**「ミッション達成」と出力してください。その際、**他の余計な会話は一切含めないでください。** それまでは、プレイヤーがミッションを達成するための行動を促し続けてください。
    逆に、プレイヤーの言動が著しく不適切であったり、会話が完全に破綻してしまったりした場合は、「ミッション失敗」と出力してください。
    それではゲームスタートです。プレイヤーに話しかけてください。
'''

story_prompt = [
    [ # Chapter 1
        '''
        [あなたの役割]
        あなたは空港の係員です。到着したばかりのプレイヤーに、入国手続きの案内をしてください。

        [最初の行動]
        「こんにちは。日本へようこそ。入国手続きのご案内をしますので、パスポートをご提示いただけますか？」と話しかけてください。
        '''
    ],
    [ # Chapter 2
        '''
        [あなたの役割]
        あなたはスーパーの店員です。プレイヤーに話しかけられたので、応対してください。

        [最初の行動]
        「いらっしゃいませ、どうされましたか？」と話しかけてください。
        '''
    ],
    [ # Chapter 3
        '''
        [あなたの役割]
        あなたはプレイヤーの新しい友人です。お互いのことをもっと知るために、趣味や週末の予定について話してください。

        [最初の行動]
        「来てくれてありがとう！このカフェ、雰囲気が良くて好きなんだ。週末はいつも何をして過ごしているの？」と話しかけてください。
        '''
    ],
    [ # Chapter 4
        '''
        [あなたの役割]
        あなたはプレイヤーの同僚です。緊張している様子のプレイヤーに、フレンドリーに自己紹介をしてください。

        [最初の行動]
        「はじめまして！今日から一緒に働くことになった〇〇です。よろしくお願いします。緊張しますよね。少しずつ慣れていけば大丈夫ですよ。」と話しかけてください。
        '''
    ],
    [ # Chapter 5
        '''
        [あなたの役割]
        あなたは医師です。プレイヤーの症状を正確に把握するため、丁寧に問診を進めてください。

        [最初の行動]
        「こんにちは。〇〇さんですね。今日はどうされましたか？どこか具合が悪いところがあれば、詳しく教えてください。」と話しかけてください。
        '''
    ],
    [ # Chapter 6
        '''
        [あなたの役割]
        あなたはプレイヤーの同僚です。プレイヤーが会議で意見を述べやすいように、サポートしてください。

        [最初の行動]
        「〇〇さんは、この件についてどう思いますか？ぜひ意見を聞かせてください。」と話しかけてください。
        '''
    ],
    [ # Chapter 7
        '''
        [あなたの役割]
        あなたはプレイヤーの友人です。日本の祭りの楽しさや文化を教えてあげてください。

        [最初の行動]
        「すごい人だね！これが日本の夏祭りだよ。初めてだと分からないことも多いと思うから、何でも聞いてね。まずは、あそこでりんご飴でも食べない？」と話しかけてください。
        '''
    ],
    [ # Chapter 8
        '''
        [あなたの役割]
        あなたは市役所の窓口担当者です。プレイヤーが必要な手続きをスムーズに進められるように、分かりやすく説明してください。

        [最初の行動]
        「こんにちは。本日はどのようなご用件でしょうか？」と話しかけてください。
        '''
    ],
    [ # Chapter 9
        '''
        [あなたの役割]
        あなたは駅員です。電車の遅延で困っているプレイヤーに、状況を説明し、代替案を提案してください。

        [最初の行動]
        「申し訳ございません、ただいま人身事故の影響で、運転を見合わせております。お急ぎのところ大変恐縮ですが、復旧までしばらくお待ちいただくか、バスなどの代替交通機関をご利用ください。」と話しかけてください。
        '''
    ]
]

personas_chapter2 = [
    "A：観光客\t日本語初級、初めての日本旅行\t親へのお土産に和菓子を買いたい\t商品の場所を店員に尋ね、おすすめを聞く",
    "B：交換留学生\t日本語中級、3か月滞在\t食材と日用品をまとめて買う\t商品の場所・容量・価格の確認、割引やポイント制度の質問",
    "C：育児中の技能実習生\t日本語初級、日本で出産・子育て中\t赤ちゃんの離乳食とおむつを探している\t成分や対象月齢など、細かい情報を尋ねる必要あり",
    "D：宗教上の理由で肉を避ける人\t日本語中級、宗教上の理由で肉を食べない\t食材に動物性原料が含まれていないか確認したい\t成分表示の意味を尋ねる、英語交じりの会話",
    "E：節約中の大学院生\t日本語中級、日本で数年生活\tセール品の確認、なるべく安く買いたい\t割引交渉、ポイントカードの有無の確認など",
    "F：健康志向のビジネスマン\t日本語中級、平日は仕事で忙しい\t糖質オフの商品を探している\t成分や栄養表示を確認しながら、店員におすすめを聞く",
    "G：アレルギーを持つ子どもの親\t日本語初級、来日半年以内\tアレルギー対応の食品を探している\t店員に成分を丁寧に聞き、安心して選びたい",
    "H：料理が趣味の外国人主婦\t日本語上級、日本人の配偶者あり\t特定の調味料や旬の野菜を探している\t商品の使い方やおすすめレシピを店員に尋ねる",
    "I：短期滞在の語学研修生\t日本語初級、滞在1ヶ月\tコンビニで手軽に食べられる物を探している\t商品名がわからず、ジェスチャーや英単語を交えて伝える",
    "J：夜勤明けの介護職員\t日本語中級、生活が不規則\t簡単に食べられる健康的な食事を探している\tレジ前での時短・効率を重視した会話、疲れ気味の応答"
]

# --- ★新しい評価フロー ---
def run_evaluation_personalized():
    CHAPTER_TO_TEST = 2
    ITERATION_COUNT = 5
    TURN_LIMIT = 30
    
    base_scenario_prompt = story_prompt[CHAPTER_TO_TEST - 1][0]

    for persona_desc in personas_chapter2:
        persona_id = persona_desc.split('：')[0]
        print(f"--- ペルソナ '{persona_id}' のパーソナライズ評価を開始 ---")

        player_summary = "" # ペルソナごとに課題要約を初期化
        messages2_training = [{"role": "system", "content": player_demo_prompt + persona_desc}]

        for test in range(ITERATION_COUNT):
            print(f"\n--- 反復訓練（パーソナライズ版）: {test + 1}/{ITERATION_COUNT} ---")

            # 1. プレイヤーの課題に基づき、動的にプロンプトを生成
            print("プレイヤーの課題に基づき、シナリオを動的に生成しています...")
            personalized_scenario = make_new_prompt(player_summary, base_scenario_prompt)
            final_agent_prompt = base_prompt_prefix + personalized_scenario + end_prompt
            messages1 = [{"role": "system", "content": final_agent_prompt}]

            # 2. 会話シミュレーション
            memory = ""
            cnt = 0
            while True:
                if cnt >= TURN_LIMIT: 
                    print(f"会話が{TURN_LIMIT}ターンに達したため、強制的に終了します。")
                    break
                
                response2 = demo_play(messages2_training)
                print(f"仮想プレイヤー: {response2}\n")
                messages1.append({"role": "user", "content": response2})
                messages2_training.append({"role": "assistant", "content": response2})
                memory += f"プレイヤー：{response2}\n" # ★プレイヤーの発言を即時記録
                
                response1 = chat_with_gpt(messages1)
                print(f"会話用エージェント: {response1}\n")
                messages1.append({"role": "assistant", "content": response1})
                messages2_training.append({"role": "user", "content": response1})
                memory += f"エージェント：{response1}\n" # ★エージェントの発言を即時記録

                if "ミッション達成" in response1 or "ミッション失敗" in response1:
                    print("ミッションが終了しました。評価に移行します。")
                    break
                
                cnt += 1
            
            # 3. 会話の評価
            eval_content = evaluation_prompt + f"\n**[評価対象の会話ログ]**\n{memory}"
            response_feedback = evaluation_with_gpt([{"role": "system", "content": eval_content}])
            
            # 4. 評価結果をファイルに保存
            output_filename = f"{persona_id}_personalized_iteration_{test + 1}.txt"
            with open(os.path.join(output_dir, output_filename), "w", encoding="utf-8") as f:
                summary_to_log = player_summary if player_summary.strip() else "（課題サマリーはありません。初回実行のため、ベースシナリオが使用されました）"
                f.write(f"[入力された課題サマリー (Player Summary)]\n{summary_to_log}\n\n---\n[上記サマリーを基に動的生成されたシナリオ]\n{personalized_scenario}\n\n---\n[会話ログ]\n{memory}\n---\n[評価・フィードバック]\n{response_feedback}")
            print(f"評価結果を {output_filename} に保存しました。")

            # 5. 次のループのために課題要約を更新
            print("今回の会話ログから次回のパーソナライズに使うための課題を分析しています...")
            new_summary = generate_player_summary(memory)
            if new_summary.strip(): # 新しいサマリーが有効な場合のみ更新
                player_summary = new_summary
                print("課題サマリーを更新しました。")
            else:
                print("（警告：有効な課題サマリーが生成されませんでした。前回のサマリーを引き続き使用します。）")

            # 6. プレイヤーにフィードバックを与えて学習を促す
            feedback_for_player = f"今回のシミュレーションは終了しました。以下のフィードバックをもとに改善してください。\nFB：{response_feedback}\nこの反省を活かして、もう一度最初から同じシチュエーションでの会話を始めてください。"
            messages2_training.append({"role": "system", "content": feedback_for_player})
        
        print(f"--- ペルソナ '{persona_id}' のテストが完了 ---\n")

if __name__ == "__main__":
    print("パーソナライズ機能付きの自動評価を開始します...")
    run_evaluation_personalized()
    print(f"すべての評価プロセスが完了しました。結果は {output_dir} に保存されています。")
